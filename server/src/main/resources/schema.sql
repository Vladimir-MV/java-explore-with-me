    DROP TABLE IF EXISTS users CASCADE;
    DROP TABLE IF EXISTS compilations CASCADE;
    DROP TABLE IF EXISTS locations CASCADE;
    DROP TABLE IF EXISTS events CASCADE;
    DROP TABLE IF EXISTS requests CASCADE;
    DROP TABLE IF EXISTS categories CASCADE;
    DROP TABLE IF EXISTS compilations_events CASCADE;
    DROP TABLE IF EXISTS location_groups CASCADE;
    DROP TABLE IF EXISTS location_groups_events CASCADE;


    CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
    );

    CREATE TABLE IF NOT EXISTS locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    lat float NOT NULL,
    lon float NOT NULL,
    CONSTRAINT pk_location PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (id),
    CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name)
    );


    CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation VARCHAR(2000) NOT NULL,
    category_id BIGINT NOT NULL,
    confirmed_requests BIGINT,
    created_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    description VARCHAR(7000) NOT NULL,
    event_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    initiator_id BIGINT NOT NULL,
    location_id BIGINT NOT NULL,
    is_paid BOOLEAN NOT NULL,
    participant_limit BIGINT,
    published_on TIMESTAMP WITHOUT TIME ZONE,
    is_request_moderation BOOLEAN NOT NULL,
    state VARCHAR(50) NOT NULL,
    title VARCHAR(120) NOT NULL,
    views BIGINT NOT NULL,
    CONSTRAINT pk_event PRIMARY KEY (id),
    FOREIGN KEY (category_id) REFERENCES categories (id),
    FOREIGN KEY (initiator_id) REFERENCES users (id),
    FOREIGN KEY (location_id) REFERENCES locations (id)
    );

    CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    is_pinned BOOLEAN,
    title  varchar(500) NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY (id),
    CONSTRAINT UQ_COMPILATIONS_TITLE UNIQUE (title)
    );


    CREATE TABLE IF NOT EXISTS compilations_events (
    compilation_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    FOREIGN KEY (compilation_id) REFERENCES compilations (id),
    FOREIGN KEY (event_id) REFERENCES events (id)
    );

    CREATE TABLE IF NOT EXISTS requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_id BIGINT NOT NULL,
    requester_id BIGINT NOT NULL,
    status VARCHAR(50) NOT NULL,
    CONSTRAINT pk_request PRIMARY KEY (id),
    FOREIGN KEY (event_id) REFERENCES events (id),
    FOREIGN KEY (requester_id) REFERENCES users (id)
    );
--Фича: Администрирование. Добавляем конкретные локации и функцию нахождения расстояния между точками

    CREATE TABLE IF NOT EXISTS location_groups (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    lat float NOT NULL,
    lon float NOT NULL,
    radius float NOT NULL,
    description VARCHAR(2000),
    CONSTRAINT pk_location_groups PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS location_groups_events (
    location_group_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    FOREIGN KEY (location_group_id) REFERENCES location_groups (id),
    FOREIGN KEY (event_id) REFERENCES events (id)
    );


    CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
        RETURNS float
    AS
    '
        declare
            dist float = 0;
            rad_lat1 float;
            rad_lat2 float;
            theta float;
            rad_theta float;
        BEGIN
            IF lat1 = lat2 AND lon1 = lon2
            THEN
                RETURN dist;
            ELSE
                -- переводим градусы широты в радианы
                rad_lat1 = pi() * lat1 / 180;
                -- переводим градусы долготы в радианы
                rad_lat2 = pi() * lat2 / 180;
                -- находим разность долгот
                theta = lon1 - lon2;
                -- переводим градусы в радианы
                rad_theta = pi() * theta / 180;
                -- находим длину ортодромии
                dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

                IF dist > 1
                THEN dist = 1;
                END IF;

                dist = acos(dist);
                -- переводим радианы в градусы
                dist = dist * 180 / pi();
                -- переводим градусы в километры
                dist = dist * 60 * 1.8524;

                RETURN dist;
            END IF;
        END;
    '
        LANGUAGE PLPGSQL;

